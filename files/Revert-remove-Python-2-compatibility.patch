From b5f69fba79d9b828e4b769c1188a81edde6433bb Mon Sep 17 00:00:00 2001
From: Georgi Valkov <georgi.t.valkov@gmail.com>
Date: Sun, 17 Jul 2022 22:26:27 +0200
Subject: [PATCH] Remove Python 2.x compatibility leftovers

---
 docs/tutorial.rst      |  2 +-
 evdev/device.py        |  5 -----
 evdev/eventio.py       |  2 +-
 evdev/eventio_async.py |  6 +-----
 evdev/events.py        | 10 +++++-----
 evdev/uinput.py        |  5 +----
 6 files changed, 9 insertions(+), 21 deletions(-)

diff --git a/docs/tutorial.rst b/docs/tutorial.rst
index d35299c..200c637 100644
--- a/docs/tutorial.rst
+++ b/docs/tutorial.rst
@@ -290,7 +290,7 @@ Associating classes with event types
 
     >>> from evdev import categorize, event_factory, ecodes
 
-    >>> class SynEvent(object):
+    >>> class SynEvent:
     ...     def __init__(self, event):
     ...         ...
 
diff --git a/evdev/device.py b/evdev/device.py
index 23254a3..dbfad5d 100644
--- a/evdev/device.py
+++ b/evdev/device.py
@@ -282,11 +282,6 @@ def __eq__(self, other):
         return isinstance(other, self.__class__) and self.info == other.info \
             and self.path == other.path
 
-    def __ne__(self, other):
-        # Python 2 compatibility. Python 3 automatically negates the value of
-        # __eq__, in case __ne__ is not defined.
-        return not self == other
-
     def __str__(self):
         msg = 'device {}, name "{}", phys "{}"'
         return msg.format(self.path, self.name, self.phys)
diff --git a/evdev/eventio.py b/evdev/eventio.py
index 22c37e2..8d84f55 100644
--- a/evdev/eventio.py
+++ b/evdev/eventio.py
@@ -13,7 +13,7 @@ class EvdevError(Exception):
     pass
 
 
-class EventIO(object):
+class EventIO:
     '''
     Base class for reading and writing input events.
 
diff --git a/evdev/eventio_async.py b/evdev/eventio_async.py
index 5969423..2d3468e 100644
--- a/evdev/eventio_async.py
+++ b/evdev/eventio_async.py
@@ -60,7 +60,7 @@ def close(self):
             pass
 
 
-class ReadIterator(object):
+class ReadIterator:
     def __init__(self, device):
         self.current_batch = iter(())
         self.device = device
@@ -69,10 +69,6 @@ def __init__(self, device):
     def __iter__(self):
         return self
 
-    # Python 2.x compatibility.
-    def next(self):
-        return self.__next__()
-
     def __next__(self):
         try:
             # Read from the previous batch of events.
diff --git a/evdev/events.py b/evdev/events.py
index 14bb0ce..9d8758d 100644
--- a/evdev/events.py
+++ b/evdev/events.py
@@ -42,7 +42,7 @@
 from evdev.ecodes import keys, KEY, SYN, REL, ABS, EV_KEY, EV_REL, EV_ABS, EV_SYN
 
 
-class InputEvent(object):
+class InputEvent:
     '''A generic input event.'''
 
     __slots__ = 'sec', 'usec', 'type', 'code', 'value'
@@ -77,7 +77,7 @@ def __repr__(s):
                           s.sec, s.usec, s.type, s.code, s.value)
 
 
-class KeyEvent(object):
+class KeyEvent:
     '''An event generated by a keyboard, button or other key-like devices.'''
 
     key_up   = 0x0
@@ -127,7 +127,7 @@ def __repr__(s):
         return '{}({!r})'.format(s.__class__.__name__, s.event)
 
 
-class RelEvent(object):
+class RelEvent:
     '''A relative axis event (e.g moving the mouse 5 units to the left).'''
 
     __slots__ = 'event'
@@ -144,7 +144,7 @@ def __repr__(s):
         return '{}({!r})'.format(s.__class__.__name__, s.event)
 
 
-class AbsEvent(object):
+class AbsEvent:
     '''An absolute axis event (e.g the coordinates of a tap on a touchscreen).'''
 
     __slots__ = 'event'
@@ -161,7 +161,7 @@ def __repr__(s):
         return '{}({!r})'.format(s.__class__.__name__, s.event)
 
 
-class SynEvent(object):
+class SynEvent:
     '''
     A synchronization event. Synchronization events are used as
     markers to separate event. Used as markers to separate
diff --git a/evdev/uinput.py b/evdev/uinput.py
index 0dc5f89..4f6148a 100644
--- a/evdev/uinput.py
+++ b/evdev/uinput.py
@@ -34,7 +34,7 @@ class UInput(EventIO):
     )
 
     @classmethod
-    def from_device(cls, *devices, **kwargs):
+    def from_device(cls, *devices, filtered_types=(ecodes.EV_SYN, ecodes.EV_FF), **kwargs):
         '''
         Create an UInput device with the capabilities of one or more input
         devices.
@@ -51,9 +51,6 @@ def from_device(cls, *devices, **kwargs):
           Keyword arguments to UInput constructor (i.e. name, vendor etc.).
         '''
 
-        # TODO: Move back to the argument list once Python 2 support is dropped.
-        filtered_types = kwargs.pop('filtered_types', (ecodes.EV_SYN, ecodes.EV_FF))
-
         device_instances = []
         for dev in devices:
             if not isinstance(dev, device.InputDevice):
